{
  "language": "Solidity",
  "sources": {
    "contracts/momentNFT.sol": {
      "content": "\npragma solidity ^0.8.0;\n\nimport \"@rari-capital/solmate/src/tokens/ERC721.sol\";\nimport \"base64-sol/base64.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ncontract momentNFT is ERC721 {\n\n  //TODO: Change Price\n  uint256 public immutable claimPrice = 0.001 ether; \n  address public immutable withdrawAddress = 0x245E32DbA4E30b483F618A3940309236AaEbBbC5 ;\n  uint public tokenCounter; \n  uint32 constant SECONDS_PER_DAY = 24 * 60 * 60;\n  uint16 constant SECONDS_PER_HOUR = 60 * 60;\n  uint8 constant SECONDS_PER_MINUTE = 60;\n  string public svgTop ;\n  string public svgBot ; \n  \n  mapping(address => bool) public claimed;\n  mapping(address => uint256) public userNFTTokenId;\n  mapping(uint256 => address) public ownerOfNFTId;\n  mapping (uint256 => int8) public timeZoneHour; \n  mapping (uint256 => int8) public timeZoneMin; \n\n  event CreatedMomentNFT(uint256 indexed tokenId);\n\n  constructor() ERC721 (\"Moment NFT\", \"momentNFT\") {\n    tokenCounter = 0 ;\n    svgTop = ' <svg width=\"400\" height=\"400\" viewBox=\"0 0 400 400\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">    <def>      <style>      .minute-arm {        fill: none;        stroke: #A3A3A3;        stroke-width: 6;        stroke-miterlimit: 8;      }      .hour-arm {        fill: none;        stroke: #fff;        stroke-width: 6;        stroke-miterlimit: 8;      }      #minute,#hour {        transform-origin: 200px 200px;      }    </style>    </def>    <rect width=\"400\" height=\"400\" fill=\"white\" />    <circle cx=\"200\" cy=\"200\" r=\"147\" stroke=\"black\" stroke-width=\"6\" />    <circle cx=\"200\" cy=\"200\" r=\"145\" fill=\"black\" stroke=\"#393939\" stroke-width=\"2\" />    <mask id=\"mask0_7_61\" style=\"mask-type:alpha\" maskUnits=\"userSpaceOnUse\" x=\"61\" y=\"61\" width=\"278\" height=\"278\">      <rect x=\"198\" y=\"61\" width=\"4\" height=\"38\" fill=\"#C4C4C4\" />      <rect x=\"198\" y=\"301\" width=\"4\" height=\"38\" fill=\"#C4C4C4\" />      <rect x=\"61\" y=\"202\" width=\"4\" height=\"38\" transform=\"rotate(-90 61 202)\" fill=\"#C4C4C4\" />      <rect x=\"301\" y=\"202\" width=\"4\" height=\"38\" transform=\"rotate(-90 301 202)\" fill=\"#C4C4C4\" />      <rect x=\"132.232\" y=\"321.378\" width=\"4\" height=\"38\" transform=\"rotate(-150 132.232 321.378)\" fill=\"#C4C4C4\" />      <rect x=\"252.232\" y=\"113.531\" width=\"4\" height=\"38\" transform=\"rotate(-150 252.232 113.531)\" fill=\"#C4C4C4\" />      <rect x=\"80.6224\" y=\"271.232\" width=\"4\" height=\"38\" transform=\"rotate(-120 80.6224 271.232)\" fill=\"#C4C4C4\" />      <rect x=\"288.469\" y=\"151.232\" width=\"4\" height=\"38\" transform=\"rotate(-120 288.469 151.232)\" fill=\"#C4C4C4\" />      <rect x=\"78.6224\" y=\"132.232\" width=\"4\" height=\"38\" transform=\"rotate(-60 78.6224 132.232)\" fill=\"#C4C4C4\" />      <rect x=\"286.469\" y=\"252.232\" width=\"4\" height=\"38\" transform=\"rotate(-60 286.469 252.232)\" fill=\"#C4C4C4\" />      <rect x=\"271.232\" y=\"319.378\" width=\"4\" height=\"38\" transform=\"rotate(150 271.232 319.378)\" fill=\"#C4C4C4\" />      <rect x=\"151.232\" y=\"111.531\" width=\"4\" height=\"38\" transform=\"rotate(150 151.232 111.531)\" fill=\"#C4C4C4\" />    </mask>    <g mask=\"url(#mask0_7_61)\">      <mask id=\"mask1_7_61\" style=\"mask-type:alpha\" maskUnits=\"userSpaceOnUse\" x=\"45\" y=\"41\" width=\"324\" height=\"316\">        <rect x=\"45\" y=\"41\" width=\"324\" height=\"316\" fill=\"url(#paint0_linear_7_61)\" />      </mask>      <g mask=\"url(#mask1_7_61)\">        <rect x=\"13\" y=\"9\" width=\"387\" height=\"359\" fill=\"#F584FF\" />        <g filter=\"url(#filter0_f_7_61)\">          <circle cx=\"82.5\" cy=\"117.5\" r=\"117.5\" fill=\"#FF84CE\" />        </g>        <g filter=\"url(#filter1_f_7_61)\">          <circle cx=\"349.5\" cy=\"239.5\" r=\"117.5\" fill=\"#84A7FF\" />        </g>        <g filter=\"url(#filter2_f_7_61)\">          <circle cx=\"113.5\" cy=\"345.5\" r=\"117.5\" fill=\"#E09191\" />        </g>      </g>    </g> ';\n    svgBot = '<circle cx=\"200\" cy=\"200\" r=\"5\" fill=\"white\" />    <defs>      <filter id=\"filter0_f_7_61\" x=\"-135\" y=\"-100\" width=\"435\" height=\"435\" filterUnits=\"userSpaceOnUse\"        color-interpolation-filters=\"sRGB\">        <feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\" />        <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />        <feGaussianBlur stdDeviation=\"50\" result=\"effect1_foregroundBlur_7_61\" />      </filter>      <filter id=\"filter1_f_7_61\" x=\"132\" y=\"22\" width=\"435\" height=\"435\" filterUnits=\"userSpaceOnUse\"        color-interpolation-filters=\"sRGB\">        <feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\" />        <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />        <feGaussianBlur stdDeviation=\"50\" result=\"effect1_foregroundBlur_7_61\" />      </filter>      <filter id=\"filter2_f_7_61\" x=\"-104\" y=\"128\" width=\"435\" height=\"435\" filterUnits=\"userSpaceOnUse\"        color-interpolation-filters=\"sRGB\">        <feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\" />        <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />        <feGaussianBlur stdDeviation=\"50\" result=\"effect1_foregroundBlur_7_61\" />      </filter>      <linearGradient id=\"paint0_linear_7_61\" x1=\"207\" y1=\"41\" x2=\"207\" y2=\"357\" gradientUnits=\"userSpaceOnUse\">        <stop stop-color=\"#FF84CE\" />        <stop offset=\"1\" stop-color=\"#923DFF\" />      </linearGradient>    </defs>  </svg>';\n  }\n\n  function create(int8 _timeZoneHour, int8 _timeZoneMin) public payable {\n    require(msg.value >= claimPrice, \"Insufficient payment\");\n    require(claimed[msg.sender] == false, \"Already Claimed\");\n    _safeMint(msg.sender, tokenCounter);\n    setTimeZone(_timeZoneHour,_timeZoneMin,tokenCounter) ; \n    claimed[msg.sender] = true;\n    userNFTTokenId[msg.sender] = tokenCounter ; \n    ownerOfNFTId[tokenCounter] = msg.sender ; \n    emit CreatedMomentNFT(tokenCounter);\n    tokenCounter = tokenCounter + 1 ; \n    uint256 refund = msg.value - claimPrice;\n    if (refund > 0) {\n      payable(msg.sender).transfer(refund);\n    }\n  }\n\n  function withdraw() public {\n    payable(withdrawAddress).transfer(address(this).balance);\n  }\n\n  function getUserNFTTokenId(address _userAddress) public returns (uint256 tokenId){\n    return userNFTTokenId[_userAddress];\n  }\n\n  function getOwnerOfNFTId(uint256 _id) public returns (address owner){\n    return ownerOfNFTId[_id];\n  }\n\n  function setTimeZone(int8 _timeZoneHour,int8 _timeZoneMin, uint tokenId) public{\n    timeZoneHour[tokenId] = _timeZoneHour ;\n    timeZoneMin[tokenId] = _timeZoneMin ;  \n  }\n\n  function svgToImageURI(string memory _svg) public pure returns (string memory){\n    string memory svgBase64Encoded = base64(bytes(string(abi.encodePacked(_svg))))  ; \n    string memory imageURI = string(abi.encodePacked(svgBase64Encoded));\n    return imageURI;\n  }\n\n  function tokenURI(uint256 id) public view override returns (string memory) {\n    int hr = int(getHour(block.timestamp)) ; \n    int min = int(getMinute(block.timestamp));\n    int sec = int(getSecond(block.timestamp)) ;\n    int hrPosition = ((hr+ timeZoneHour[id] + (timeZoneMin[id] /60)) * 360) / 12 + ((min+ timeZoneMin[id]) * (360 / 60)) / 12 ;\n    int minPosition = ((min +timeZoneMin[id]) * 360) / 60 + (sec * (360 / 60)) / 60;\n    string memory sHrPosition = Strings.toString(uint(hrPosition)) ; \n    string memory sMinPosition = Strings.toString(uint(minPosition)) ; \n    string memory svgMid = string(abi.encodePacked(' <g id=\"minute\" transform = \"rotate(',sMinPosition,'  )\">      <path class=\"minute-arm\" d=\"M200 200V78\" />      <circle class=\"sizing-box\" cx=\"200\" cy=\"200\" r=\"130\" />    </g>    <g id=\"hour\" transform = \"rotate(',sHrPosition,'  )\">      <path class=\"hour-arm\" d=\"M200 200V140\" />      <circle class=\"sizing-box\" cx=\"200\" cy=\"200\" r=\"130\" />    </g>  '));\n    string memory svg = string(abi.encodePacked(svgTop, svgMid, svgBot )) ; \n    string memory imageURI = svgToImageURI(svg) ;\n    string memory json = base64(bytes(abi.encodePacked('{\"name\": \"Moment NFT\", \"description\": \"Fully on-chain clock NFT that shows you the current time.\", \"image\": \"data:image/svg+xml;base64,',imageURI ,'\"}')));\n    return string(abi.encodePacked('data:application/json;base64,', json));\n  }\n\n  function getHour(uint timestamp) internal pure returns (uint hour) {\n        uint secs = timestamp % SECONDS_PER_DAY;\n        hour = secs / SECONDS_PER_HOUR;\n    }\n\n  function getMinute(uint timestamp) internal pure returns (uint minute) {\n        uint secs = timestamp % SECONDS_PER_HOUR;\n        minute = secs / SECONDS_PER_MINUTE;\n    }\n\n  function getSecond(uint timestamp) internal pure returns (uint second) {\n        second = timestamp % SECONDS_PER_MINUTE;\n    }\n\n  function base64(bytes memory data) internal pure returns (string memory) {\n    bytes memory TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    uint256 len = data.length;\n    if (len == 0) return \"\";\n\n    // multiply by 4/3 rounded up\n    uint256 encodedLen = 4 * ((len + 2) / 3);\n\n    // Add some extra buffer at the end\n    bytes memory result = new bytes(encodedLen + 32);\n\n    bytes memory table = TABLE;\n\n    assembly {\n      let tablePtr := add(table, 1)\n      let resultPtr := add(result, 32)\n\n      for {\n        let i := 0\n      } lt(i, len) {\n\n      } {\n        i := add(i, 3)\n        let input := and(mload(add(data, i)), 0xffffff)\n\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\n        out := shl(8, out)\n        out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\n        out := shl(8, out)\n        out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\n        out := shl(8, out)\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\n        out := shl(224, out)\n\n        mstore(resultPtr, out)\n\n        resultPtr := add(resultPtr, 4)\n      }\n\n      switch mod(len, 3)\n      case 1 {\n          mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n      }\n      case 2 {\n          mstore(sub(resultPtr, 1), shl(248, 0x3d))\n      }\n\n      mstore(result, encodedLen)\n    }\n\n    return string(result);\n  }\n}"
    },
    "@rari-capital/solmate/src/tokens/ERC721.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\n/// @dev Note that balanceOf does not revert if passed the zero address, in defiance of the ERC.\nabstract contract ERC721 {\n    /*///////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\n\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /*///////////////////////////////////////////////////////////////\n                          METADATA STORAGE/LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    function tokenURI(uint256 id) public view virtual returns (string memory);\n\n    /*///////////////////////////////////////////////////////////////\n                            ERC721 STORAGE                        \n    //////////////////////////////////////////////////////////////*/\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(uint256 => address) public ownerOf;\n\n    mapping(uint256 => address) public getApproved;\n\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\n\n    /*///////////////////////////////////////////////////////////////\n                              CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 id) public virtual {\n        address owner = ownerOf[id];\n\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\n\n        getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        require(from == ownerOf[id], \"WRONG_FROM\");\n\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\n            \"NOT_AUTHORIZED\"\n        );\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        unchecked {\n            balanceOf[from]--;\n\n            balanceOf[to]++;\n        }\n\n        ownerOf[id] = to;\n\n        delete getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes memory data\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 id) internal virtual {\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(ownerOf[id] == address(0), \"ALREADY_MINTED\");\n\n        // Counter overflow is incredibly unrealistic.\n        unchecked {\n            balanceOf[to]++;\n        }\n\n        ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }\n\n    function _burn(uint256 id) internal virtual {\n        address owner = ownerOf[id];\n\n        require(owner != address(0), \"NOT_MINTED\");\n\n        // Ownership check above ensures no underflow.\n        unchecked {\n            balanceOf[owner]--;\n        }\n\n        delete ownerOf[id];\n\n        delete getApproved[id];\n\n        emit Transfer(owner, address(0), id);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       INTERNAL SAFE MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _safeMint(\n        address to,\n        uint256 id,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n}\n\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\ninterface ERC721TokenReceiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 id,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "base64-sol/base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides functions for encoding/decoding base64\nlibrary Base64 {\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }\n\n    function decode(string memory _data) internal pure returns (bytes memory) {\n        bytes memory data = bytes(_data);\n\n        if (data.length == 0) return new bytes(0);\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\n\n        // load the table into memory\n        bytes memory table = TABLE_DECODE;\n\n        // every 4 characters represent 3 bytes\n        uint256 decodedLen = (data.length / 4) * 3;\n\n        // add some extra buffer at the end required for the writing\n        bytes memory result = new bytes(decodedLen + 32);\n\n        assembly {\n            // padding with '='\n            let lastBytes := mload(add(data, mload(data)))\n            if eq(and(lastBytes, 0xFF), 0x3d) {\n                decodedLen := sub(decodedLen, 1)\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\n                    decodedLen := sub(decodedLen, 1)\n                }\n            }\n\n            // set the actual output length\n            mstore(result, decodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 4 characters at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               // read 4 characters\n               dataPtr := add(dataPtr, 4)\n               let input := mload(dataPtr)\n\n               // write 3 bytes\n               let output := add(\n                   add(\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\n                   add(\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\n                    )\n                )\n                mstore(resultPtr, shl(232, output))\n                resultPtr := add(resultPtr, 3)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}