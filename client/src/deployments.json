{
  "name": "rinkeby",
  "chainId": "4",
  "contracts": {
    "momentNFT": {
      "address": "0x3e22E6CA32F9b141B0aCD9c90683d9e4053D1e93",
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "CreatedMomentNFT",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "claimPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "claimed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "int8",
              "name": "_timeZoneHour",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "_timeZoneMin",
              "type": "int8"
            }
          ],
          "name": "create",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256"
            }
          ],
          "name": "getOwnerOfNFTId",
          "outputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_userAddress",
              "type": "address"
            }
          ],
          "name": "getUserNFTTokenId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "ownerOfNFTId",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "setApprovalForAll",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "int8",
              "name": "_timeZoneHour",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "_timeZoneMin",
              "type": "int8"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "setTimeZone",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "svgBot",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_svg",
              "type": "string"
            }
          ],
          "name": "svgToImageURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "svgTop",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "timeZoneHour",
          "outputs": [
            {
              "internalType": "int8",
              "name": "",
              "type": "int8"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "timeZoneMin",
          "outputs": [
            {
              "internalType": "int8",
              "name": "",
              "type": "int8"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "tokenCounter",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "userNFTTokenId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "withdraw",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "withdrawAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "transactionHash": "0x661787be401524e0881541bf849051db1333de8a21f2c1d517fd685308ffbd62",
      "receipt": {
        "to": null,
        "from": "0xCDa5971084562774cEbEac709139EC45ca3160dc",
        "contractAddress": "0x3e22E6CA32F9b141B0aCD9c90683d9e4053D1e93",
        "transactionIndex": 20,
        "gasUsed": "6353877",
        "logsBloom": "0x
        "blockHash": "0x808b5c179c23c6a1a6b36c941168c905e025048c392ba9bd44a4f3faca0f519a",
        "transactionHash": "0x661787be401524e0881541bf849051db1333de8a21f2c1d517fd685308ffbd62",
        "logs": [],
        "blockNumber": 10433680,
        "cumulativeGasUsed": "8298983",
        "status": 1,
        "byzantium": true
      },
      "args": [],
      "numDeployments": 3,
      "solcInputHash": "bd28c72642fec04ceff3018ffb83d93b",
      "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CreatedMomentNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int8\",\"name\":\"_timeZoneHour\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"_timeZoneMin\",\"type\":\"int8\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOwnerOfNFTId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserNFTTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOfNFTId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int8\",\"name\":\"_timeZoneHour\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"_timeZoneMin\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setTimeZone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"svgBot\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_svg\",\"type\":\"string\"}],\"name\":\"svgToImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"svgTop\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeZoneHour\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeZoneMin\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNFTTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/momentNFT.sol\":\"momentNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\n/// @dev Note that balanceOf does not revert if passed the zero address, in defiance of the ERC.\\nabstract contract ERC721 {\\n    /*///////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            ERC721 STORAGE                        \\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(uint256 => address) public ownerOf;\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            balanceOf[from]--;\\n\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = ownerOf[id];\\n\\n        require(owner != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            balanceOf[owner]--;\\n        }\\n\\n        delete ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\ninterface ERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x06e377f5355b04b8b35b89c5073c3765b034b133b1b6136c44f7e8035aa58935\",\"license\":\"AGPL-3.0-only\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/momentNFT.sol\":{\"content\":\"\\npragma solidity ^0.8.0;\\n\\nimport \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract momentNFT is ERC721 {\\n\\n  //TODO: Change Price\\n  uint256 public immutable claimPrice = 0.001 ether; \\n  address public immutable withdrawAddress = 0x245E32DbA4E30b483F618A3940309236AaEbBbC5 ;\\n  uint public tokenCounter; \\n  uint32 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n  uint16 constant SECONDS_PER_HOUR = 60 * 60;\\n  uint8 constant SECONDS_PER_MINUTE = 60;\\n  string public svgTop ;\\n  string public svgBot ; \\n  \\n  mapping(address => bool) public claimed;\\n  mapping(address => uint256) public userNFTTokenId;\\n  mapping(uint256 => address) public ownerOfNFTId;\\n  mapping (uint256 => int8) public timeZoneHour; \\n  mapping (uint256 => int8) public timeZoneMin; \\n\\n  event CreatedMomentNFT(uint256 indexed tokenId);\\n\\n  constructor() ERC721 (\\\"Moment NFT\\\", \\\"momentNFT\\\") {\\n    tokenCounter = 0 ;\\n    svgTop = ' <svg width=\\\"400\\\" height=\\\"400\\\" viewBox=\\\"0 0 400 400\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">    <def>      <style>      .minute-arm {        fill: none;        stroke: #A3A3A3;        stroke-width: 6;        stroke-miterlimit: 8;      }      .hour-arm {        fill: none;        stroke: #fff;        stroke-width: 6;        stroke-miterlimit: 8;      }      #minute,#hour {        transform-origin: 200px 200px;      }    </style>    </def>    <rect width=\\\"400\\\" height=\\\"400\\\" fill=\\\"white\\\" />    <circle cx=\\\"200\\\" cy=\\\"200\\\" r=\\\"147\\\" stroke=\\\"black\\\" stroke-width=\\\"6\\\" />    <circle cx=\\\"200\\\" cy=\\\"200\\\" r=\\\"145\\\" fill=\\\"black\\\" stroke=\\\"#393939\\\" stroke-width=\\\"2\\\" />    <mask id=\\\"mask0_7_61\\\" style=\\\"mask-type:alpha\\\" maskUnits=\\\"userSpaceOnUse\\\" x=\\\"61\\\" y=\\\"61\\\" width=\\\"278\\\" height=\\\"278\\\">      <rect x=\\\"198\\\" y=\\\"61\\\" width=\\\"4\\\" height=\\\"38\\\" fill=\\\"#C4C4C4\\\" />      <rect x=\\\"198\\\" y=\\\"301\\\" width=\\\"4\\\" height=\\\"38\\\" fill=\\\"#C4C4C4\\\" />      <rect x=\\\"61\\\" y=\\\"202\\\" width=\\\"4\\\" height=\\\"38\\\" transform=\\\"rotate(-90 61 202)\\\" fill=\\\"#C4C4C4\\\" />      <rect x=\\\"301\\\" y=\\\"202\\\" width=\\\"4\\\" height=\\\"38\\\" transform=\\\"rotate(-90 301 202)\\\" fill=\\\"#C4C4C4\\\" />      <rect x=\\\"132.232\\\" y=\\\"321.378\\\" width=\\\"4\\\" height=\\\"38\\\" transform=\\\"rotate(-150 132.232 321.378)\\\" fill=\\\"#C4C4C4\\\" />      <rect x=\\\"252.232\\\" y=\\\"113.531\\\" width=\\\"4\\\" height=\\\"38\\\" transform=\\\"rotate(-150 252.232 113.531)\\\" fill=\\\"#C4C4C4\\\" />      <rect x=\\\"80.6224\\\" y=\\\"271.232\\\" width=\\\"4\\\" height=\\\"38\\\" transform=\\\"rotate(-120 80.6224 271.232)\\\" fill=\\\"#C4C4C4\\\" />      <rect x=\\\"288.469\\\" y=\\\"151.232\\\" width=\\\"4\\\" height=\\\"38\\\" transform=\\\"rotate(-120 288.469 151.232)\\\" fill=\\\"#C4C4C4\\\" />      <rect x=\\\"78.6224\\\" y=\\\"132.232\\\" width=\\\"4\\\" height=\\\"38\\\" transform=\\\"rotate(-60 78.6224 132.232)\\\" fill=\\\"#C4C4C4\\\" />      <rect x=\\\"286.469\\\" y=\\\"252.232\\\" width=\\\"4\\\" height=\\\"38\\\" transform=\\\"rotate(-60 286.469 252.232)\\\" fill=\\\"#C4C4C4\\\" />      <rect x=\\\"271.232\\\" y=\\\"319.378\\\" width=\\\"4\\\" height=\\\"38\\\" transform=\\\"rotate(150 271.232 319.378)\\\" fill=\\\"#C4C4C4\\\" />      <rect x=\\\"151.232\\\" y=\\\"111.531\\\" width=\\\"4\\\" height=\\\"38\\\" transform=\\\"rotate(150 151.232 111.531)\\\" fill=\\\"#C4C4C4\\\" />    </mask>    <g mask=\\\"url(#mask0_7_61)\\\">      <mask id=\\\"mask1_7_61\\\" style=\\\"mask-type:alpha\\\" maskUnits=\\\"userSpaceOnUse\\\" x=\\\"45\\\" y=\\\"41\\\" width=\\\"324\\\" height=\\\"316\\\">        <rect x=\\\"45\\\" y=\\\"41\\\" width=\\\"324\\\" height=\\\"316\\\" fill=\\\"url(#paint0_linear_7_61)\\\" />      </mask>      <g mask=\\\"url(#mask1_7_61)\\\">        <rect x=\\\"13\\\" y=\\\"9\\\" width=\\\"387\\\" height=\\\"359\\\" fill=\\\"#F584FF\\\" />        <g filter=\\\"url(#filter0_f_7_61)\\\">          <circle cx=\\\"82.5\\\" cy=\\\"117.5\\\" r=\\\"117.5\\\" fill=\\\"#FF84CE\\\" />        </g>        <g filter=\\\"url(#filter1_f_7_61)\\\">          <circle cx=\\\"349.5\\\" cy=\\\"239.5\\\" r=\\\"117.5\\\" fill=\\\"#84A7FF\\\" />        </g>        <g filter=\\\"url(#filter2_f_7_61)\\\">          <circle cx=\\\"113.5\\\" cy=\\\"345.5\\\" r=\\\"117.5\\\" fill=\\\"#E09191\\\" />        </g>      </g>    </g> ';\\n    svgBot = '<circle cx=\\\"200\\\" cy=\\\"200\\\" r=\\\"5\\\" fill=\\\"white\\\" />    <defs>      <filter id=\\\"filter0_f_7_61\\\" x=\\\"-135\\\" y=\\\"-100\\\" width=\\\"435\\\" height=\\\"435\\\" filterUnits=\\\"userSpaceOnUse\\\"        color-interpolation-filters=\\\"sRGB\\\">        <feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\" />        <feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"shape\\\" />        <feGaussianBlur stdDeviation=\\\"50\\\" result=\\\"effect1_foregroundBlur_7_61\\\" />      </filter>      <filter id=\\\"filter1_f_7_61\\\" x=\\\"132\\\" y=\\\"22\\\" width=\\\"435\\\" height=\\\"435\\\" filterUnits=\\\"userSpaceOnUse\\\"        color-interpolation-filters=\\\"sRGB\\\">        <feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\" />        <feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"shape\\\" />        <feGaussianBlur stdDeviation=\\\"50\\\" result=\\\"effect1_foregroundBlur_7_61\\\" />      </filter>      <filter id=\\\"filter2_f_7_61\\\" x=\\\"-104\\\" y=\\\"128\\\" width=\\\"435\\\" height=\\\"435\\\" filterUnits=\\\"userSpaceOnUse\\\"        color-interpolation-filters=\\\"sRGB\\\">        <feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\" />        <feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"shape\\\" />        <feGaussianBlur stdDeviation=\\\"50\\\" result=\\\"effect1_foregroundBlur_7_61\\\" />      </filter>      <linearGradient id=\\\"paint0_linear_7_61\\\" x1=\\\"207\\\" y1=\\\"41\\\" x2=\\\"207\\\" y2=\\\"357\\\" gradientUnits=\\\"userSpaceOnUse\\\">        <stop stop-color=\\\"#FF84CE\\\" />        <stop offset=\\\"1\\\" stop-color=\\\"#923DFF\\\" />      </linearGradient>    </defs>  </svg>';\\n  }\\n\\n  function create(int8 _timeZoneHour, int8 _timeZoneMin) public payable {\\n    require(msg.value >= claimPrice, \\\"Insufficient payment\\\");\\n    require(claimed[msg.sender] == false, \\\"Already Claimed\\\");\\n    _safeMint(msg.sender, tokenCounter);\\n    setTimeZone(_timeZoneHour,_timeZoneMin,tokenCounter) ; \\n    claimed[msg.sender] = true;\\n    userNFTTokenId[msg.sender] = tokenCounter ; \\n    ownerOfNFTId[tokenCounter] = msg.sender ; \\n    emit CreatedMomentNFT(tokenCounter);\\n    tokenCounter = tokenCounter + 1 ; \\n    uint256 refund = msg.value - claimPrice;\\n    if (refund > 0) {\\n      payable(msg.sender).transfer(refund);\\n    }\\n  }\\n\\n  function withdraw() public {\\n    payable(withdrawAddress).transfer(address(this).balance);\\n  }\\n\\n  function getUserNFTTokenId(address _userAddress) public view returns (uint256 tokenId){\\n    return userNFTTokenId[_userAddress];\\n  }\\n\\n  function getOwnerOfNFTId(uint256 _id) public view returns (address owner){\\n    return ownerOfNFTId[_id];\\n  }\\n\\n  function setTimeZone(int8 _timeZoneHour,int8 _timeZoneMin, uint tokenId) public{\\n    timeZoneHour[tokenId] = _timeZoneHour ;\\n    timeZoneMin[tokenId] = _timeZoneMin ;  \\n  }\\n\\n  function svgToImageURI(string memory _svg) public pure returns (string memory){\\n    string memory svgBase64Encoded = base64(bytes(string(abi.encodePacked(_svg))))  ; \\n    string memory imageURI = string(abi.encodePacked(svgBase64Encoded));\\n    return imageURI;\\n  }\\n\\n  function tokenURI(uint256 id) public view override returns (string memory) {\\n    int hr = int(getHour(block.timestamp)) ; \\n    int min = int(getMinute(block.timestamp));\\n    int sec = int(getSecond(block.timestamp)) ;\\n    int hrPosition = ((hr+ timeZoneHour[id] + (timeZoneMin[id] /60)) * 360) / 12 + ((min+ timeZoneMin[id]) * (360 / 60)) / 12 ;\\n    int minPosition = ((min +timeZoneMin[id]) * 360) / 60 + (sec * (360 / 60)) / 60;\\n    string memory sHrPosition = Strings.toString(uint(hrPosition)) ; \\n    string memory sMinPosition = Strings.toString(uint(minPosition)) ; \\n    string memory svgMid = string(abi.encodePacked(' <g id=\\\"minute\\\" transform = \\\"rotate(',sMinPosition,'  )\\\">      <path class=\\\"minute-arm\\\" d=\\\"M200 200V78\\\" />      <circle class=\\\"sizing-box\\\" cx=\\\"200\\\" cy=\\\"200\\\" r=\\\"130\\\" />    </g>    <g id=\\\"hour\\\" transform = \\\"rotate(',sHrPosition,'  )\\\">      <path class=\\\"hour-arm\\\" d=\\\"M200 200V140\\\" />      <circle class=\\\"sizing-box\\\" cx=\\\"200\\\" cy=\\\"200\\\" r=\\\"130\\\" />    </g>  '));\\n    string memory svg = string(abi.encodePacked(svgTop, svgMid, svgBot )) ; \\n    string memory imageURI = svgToImageURI(svg) ;\\n    string memory json = base64(bytes(abi.encodePacked('{\\\"name\\\": \\\"Moment NFT\\\", \\\"description\\\": \\\"Fully on-chain clock NFT that shows you the current time.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',imageURI ,'\\\"}')));\\n    return string(abi.encodePacked('data:application/json;base64,', json));\\n  }\\n\\n  function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n  function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n  function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n  function base64(bytes memory data) internal pure returns (string memory) {\\n    bytes memory TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n    uint256 len = data.length;\\n    if (len == 0) return \\\"\\\";\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n    // Add some extra buffer at the end\\n    bytes memory result = new bytes(encodedLen + 32);\\n\\n    bytes memory table = TABLE;\\n\\n    assembly {\\n      let tablePtr := add(table, 1)\\n      let resultPtr := add(result, 32)\\n\\n      for {\\n        let i := 0\\n      } lt(i, len) {\\n\\n      } {\\n        i := add(i, 3)\\n        let input := and(mload(add(data, i)), 0xffffff)\\n\\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n        out := shl(224, out)\\n\\n        mstore(resultPtr, out)\\n\\n        resultPtr := add(resultPtr, 4)\\n      }\\n\\n      switch mod(len, 3)\\n      case 1 {\\n          mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n          mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n\\n      mstore(result, encodedLen)\\n    }\\n\\n    return string(result);\\n  }\\n}\",\"keccak256\":\"0x6213caccfa465f594b0cda8a50064e315d300eec12f1d1e8da0eba10f9f11299\"}},\"version\":1}",
      "bytecode": "0x60c060405266038d7ea4c6800060809081525073245e32dba4e30b483f618a3940309236aaebbbc573ffffffffffffffffffffffffffffffffffffffff1660a09073ffffffffffffffffffffffffffffffffffffffff168152503480156200006657600080fd5b506040518060400160405280600a81526020017f4d6f6d656e74204e4654000000000000000000000000000000000000000000008152506040518060400160405280600981526020017f6d6f6d656e744e465400000000000000000000000000000000000000000000008152508160009080519060200190620000eb9291906200017f565b508060019080519060200190620001049291906200017f565b505050600060068190555060405180610b000160405280610acf815260200162003c30610acf913960079080519060200190620001439291906200017f565b506040518061060001604052806105d78152602001620046ff6105d7913960089080519060200190620001789291906200017f565b5062000294565b8280546200018d906200025e565b90600052602060002090601f016020900481019282620001b15760008555620001fd565b82601f10620001cc57805160ff1916838001178555620001fd565b82800160010185558215620001fd579182015b82811115620001fc578251825591602001919060010190620001df565b5b5090506200020c919062000210565b5090565b5b808211156200022b57600081600090555060010162000211565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200027757607f821691505b602082108114156200028e576200028d6200022f565b5b50919050565b60805160a051613961620002cf60003960008181610ab10152610f95015260008181610ad5015281816119010152611b4801526139616000f3fe6080604052600436106101c25760003560e01c806367913340116100f7578063c87b56dd11610095578063d082e38111610064578063d082e381146106c4578063d1369b0f146106ef578063db819ade1461071a578063e985e9c514610736576101c2565b8063c87b56dd146105e4578063c884ef8314610621578063cdc1d7921461065e578063ce9ecbd11461069b576101c2565b806395d89b41116100d157806395d89b411461053c578063a22cb46514610567578063ab98e42514610590578063b88d4fde146105bb576101c2565b8063679133401461048557806370a08231146104c25780637c6d56a6146104ff576101c2565b806330d871c6116101645780633ccfd60b1161013e5780633ccfd60b146103cb5780633fb2b692146103e257806342842e0e1461041f5780636352211e14610448576101c2565b806330d871c6146103145780633af9e89c146103515780633afbf2511461038e576101c2565b8063095ea7b3116101a0578063095ea7b31461026c5780631581b6001461029557806315d655c9146102c057806323b872dd146102eb576101c2565b806301ffc9a7146101c757806306fdde0314610204578063081812fc1461022f575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e9919061232b565b610773565b6040516101fb9190612373565b60405180910390f35b34801561021057600080fd5b50610219610805565b6040516102269190612427565b60405180910390f35b34801561023b57600080fd5b506102566004803603810190610251919061247f565b610893565b60405161026391906124ed565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e9190612534565b6108c6565b005b3480156102a157600080fd5b506102aa610aaf565b6040516102b791906124ed565b60405180910390f35b3480156102cc57600080fd5b506102d5610ad3565b6040516102e29190612583565b60405180910390f35b3480156102f757600080fd5b50610312600480360381019061030d919061259e565b610af7565b005b34801561032057600080fd5b5061033b60048036038101906103369190612726565b610ef7565b6040516103489190612427565b60405180910390f35b34801561035d57600080fd5b506103786004803603810190610373919061247f565b610f53565b604051610385919061278b565b60405180910390f35b34801561039a57600080fd5b506103b560048036038101906103b0919061247f565b610f73565b6040516103c2919061278b565b60405180910390f35b3480156103d757600080fd5b506103e0610f93565b005b3480156103ee57600080fd5b50610409600480360381019061040491906127a6565b610ffc565b6040516104169190612583565b60405180910390f35b34801561042b57600080fd5b506104466004803603810190610441919061259e565b611014565b005b34801561045457600080fd5b5061046f600480360381019061046a919061247f565b61114c565b60405161047c91906124ed565b60405180910390f35b34801561049157600080fd5b506104ac60048036038101906104a7919061247f565b61117f565b6040516104b991906124ed565b60405180910390f35b3480156104ce57600080fd5b506104e960048036038101906104e491906127a6565b6111bc565b6040516104f69190612583565b60405180910390f35b34801561050b57600080fd5b50610526600480360381019061052191906127a6565b6111d4565b6040516105339190612583565b60405180910390f35b34801561054857600080fd5b5061055161121d565b60405161055e9190612427565b60405180910390f35b34801561057357600080fd5b5061058e600480360381019061058991906127ff565b6112ab565b005b34801561059c57600080fd5b506105a56113a8565b6040516105b29190612427565b60405180910390f35b3480156105c757600080fd5b506105e260048036038101906105dd91906128e0565b611436565b005b3480156105f057600080fd5b5061060b6004803603810190610606919061247f565b611571565b6040516106189190612427565b60405180910390f35b34801561062d57600080fd5b50610648600480360381019061064391906127a6565b6117b5565b6040516106559190612373565b60405180910390f35b34801561066a57600080fd5b506106856004803603810190610680919061247f565b6117d5565b60405161069291906124ed565b60405180910390f35b3480156106a757600080fd5b506106c260048036038101906106bd919061298f565b611808565b005b3480156106d057600080fd5b506106d961186b565b6040516106e69190612583565b60405180910390f35b3480156106fb57600080fd5b50610704611871565b6040516107119190612427565b60405180910390f35b610734600480360381019061072f91906129e2565b6118ff565b005b34801561074257600080fd5b5061075d60048036038101906107589190612a22565b611bca565b60405161076a9190612373565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107ce57506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107fe5750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6000805461081290612a91565b80601f016020809104026020016040519081016040528092919081815260200182805461083e90612a91565b801561088b5780601f106108605761010080835404028352916020019161088b565b820191906000526020600020905b81548152906001019060200180831161086e57829003601f168201915b505050505081565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109be5750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6109fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f490612b0f565b60405180910390fd5b826004600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6003600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610b98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8f90612b7b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bff90612be7565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610cc85750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b80610d3157506004600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610d70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6790612b0f565b60405180910390fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60606000610f2383604051602001610f0f9190612c43565b604051602081830303815290604052611bf9565b9050600081604051602001610f389190612c43565b60405160208183030381529060405290508092505050919050565b600c6020528060005260406000206000915054906101000a900460000b81565b600d6020528060005260406000206000915054906101000a900460000b81565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610ff9573d6000803e3d6000fd5b50565b600a6020528060005260406000206000915090505481565b61101f838383610af7565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480611108575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b81526004016110a493929190612c91565b6020604051808303816000875af11580156110c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e79190612cf0565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113e90612d69565b60405180910390fd5b505050565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60026020528060005260406000206000915090505481565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6001805461122a90612a91565b80601f016020809104026020016040519081016040528092919081815260200182805461125690612a91565b80156112a35780601f10611278576101008083540402835291602001916112a3565b820191906000526020600020905b81548152906001019060200180831161128657829003601f168201915b505050505081565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161139c9190612373565b60405180910390a35050565b600780546113b590612a91565b80601f01602080910402602001604051908101604052809291908181526020018280546113e190612a91565b801561142e5780601f106114035761010080835404028352916020019161142e565b820191906000526020600020905b81548152906001019060200180831161141157829003601f168201915b505050505081565b611441848484610af7565b60008373ffffffffffffffffffffffffffffffffffffffff163b148061152c575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168373ffffffffffffffffffffffffffffffffffffffff1663150b7a02338786866040518563ffffffff1660e01b81526004016114c89493929190612dcd565b6020604051808303816000875af11580156114e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150b9190612cf0565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b61156b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156290612d69565b60405180910390fd5b50505050565b6060600061157e42611d98565b9050600061158b42611dcc565b9050600061159842611dfb565b90506000600c6006600d600089815260200190815260200160002060009054906101000a900460000b60000b856115cf9190612e52565b6115d99190612ee6565b6115e3919061302c565b600c610168603c600d60008b815260200190815260200160002060009054906101000a900460000b6116159190613096565b60000b600c60008b815260200190815260200160002060009054906101000a900460000b60000b886116479190612e52565b6116519190612e52565b61165b9190612ee6565b611665919061302c565b61166f9190612e52565b90506000603c6006846116829190612ee6565b61168c919061302c565b603c610168600d60008b815260200190815260200160002060009054906101000a900460000b60000b876116c09190612e52565b6116ca9190612ee6565b6116d4919061302c565b6116de9190612e52565b905060006116eb83611e14565b905060006116f883611e14565b90506000818360405160200161170f929190613314565b604051602081830303815290604052905060006007826008604051602001611739939291906133ed565b6040516020818303038152906040529050600061175582610ef7565b905060006117818260405160200161176d919061354e565b604051602081830303815290604052611bf9565b90508060405160200161179491906135c7565b6040516020818303038152906040529b505050505050505050505050919050565b60096020528060005260406000206000915054906101000a900460ff1681565b600b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b82600c600083815260200190815260200160002060006101000a81548160ff021916908360000b60ff16021790555081600d600083815260200190815260200160002060006101000a81548160ff021916908360000b60ff160217905550505050565b60065481565b6008805461187e90612a91565b80601f01602080910402602001604051908101604052809291908181526020018280546118aa90612a91565b80156118f75780601f106118cc576101008083540402835291602001916118f7565b820191906000526020600020905b8154815290600101906020018083116118da57829003601f168201915b505050505081565b7f0000000000000000000000000000000000000000000000000000000000000000341015611962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195990613635565b60405180910390fd5b60001515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146119f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ec906136a1565b60405180910390fd5b611a0133600654611f75565b611a0e8282600654611808565b6001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600654600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600b6000600654815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506006547f8473e948bcf25e455d9d6476037e3b847d78f2411a8481e70d546afce6a7579160405160405180910390a26001600654611b3e91906136c1565b60068190555060007f000000000000000000000000000000000000000000000000000000000000000034611b729190613717565b90506000811115611bc5573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611bc3573d6000803e3d6000fd5b505b505050565b60056020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b606060006040518060600160405280604081526020016138ec6040913990506000835190506000811415611c40576040518060200160405280600081525092505050611d93565b60006003600283611c5191906136c1565b611c5b919061374b565b6004611c67919061377c565b90506000602082611c7891906136c1565b67ffffffffffffffff811115611c9157611c906125fb565b5b6040519080825280601f01601f191660200182016040528015611cc35781602001600182028036833780820191505090505b5090506000849050600181016020830160005b86811015611d4f5760038101905062ffffff818b015116603f8160121c168401518060081b905060ff603f83600c1c1686015116810190508060081b905060ff603f8360061c1686015116810190508060081b905060ff603f831686015116810190508060e01b90508084526004840193505050611cd6565b506003860660018114611d695760028114611d7957611d84565b613d3d60f01b6002830352611d84565b603d60f81b60018303525b50848452505081955050505050505b919050565b6000806201518063ffffffff1683611db091906137d6565b9050610e1061ffff1681611dc4919061374b565b915050919050565b600080610e1061ffff1683611de191906137d6565b9050603c60ff1681611df3919061374b565b915050919050565b6000603c60ff1682611e0d91906137d6565b9050919050565b60606000821415611e5c576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611f70565b600082905060005b60008214611e8e578080611e7790613807565b915050600a82611e87919061374b565b9150611e64565b60008167ffffffffffffffff811115611eaa57611ea96125fb565b5b6040519080825280601f01601f191660200182016040528015611edc5781602001600182028036833780820191505090505b5090505b60008514611f6957600182611ef59190613717565b9150600a85611f0491906137d6565b6030611f1091906136c1565b60f81b818381518110611f2657611f25613850565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611f62919061374b565b9450611ee0565b8093505050505b919050565b611f7f82826120ac565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480612069575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a02336000856040518463ffffffff1660e01b815260040161200593929190612c91565b6020604051808303816000875af1158015612024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120489190612cf0565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b6120a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209f90612d69565b60405180910390fd5b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561211c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211390612be7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146121be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b5906138cb565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612308816122d3565b811461231357600080fd5b50565b600081359050612325816122ff565b92915050565b600060208284031215612341576123406122c9565b5b600061234f84828501612316565b91505092915050565b60008115159050919050565b61236d81612358565b82525050565b60006020820190506123886000830184612364565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123c85780820151818401526020810190506123ad565b838111156123d7576000848401525b50505050565b6000601f19601f8301169050919050565b60006123f98261238e565b6124038185612399565b93506124138185602086016123aa565b61241c816123dd565b840191505092915050565b6000602082019050818103600083015261244181846123ee565b905092915050565b6000819050919050565b61245c81612449565b811461246757600080fd5b50565b60008135905061247981612453565b92915050565b600060208284031215612495576124946122c9565b5b60006124a38482850161246a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124d7826124ac565b9050919050565b6124e7816124cc565b82525050565b600060208201905061250260008301846124de565b92915050565b612511816124cc565b811461251c57600080fd5b50565b60008135905061252e81612508565b92915050565b6000806040838503121561254b5761254a6122c9565b5b60006125598582860161251f565b925050602061256a8582860161246a565b9150509250929050565b61257d81612449565b82525050565b60006020820190506125986000830184612574565b92915050565b6000806000606084860312156125b7576125b66122c9565b5b60006125c58682870161251f565b93505060206125d68682870161251f565b92505060406125e78682870161246a565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612633826123dd565b810181811067ffffffffffffffff82111715612652576126516125fb565b5b80604052505050565b60006126656122bf565b9050612671828261262a565b919050565b600067ffffffffffffffff821115612691576126906125fb565b5b61269a826123dd565b9050602081019050919050565b82818337600083830152505050565b60006126c96126c484612676565b61265b565b9050828152602081018484840111156126e5576126e46125f6565b5b6126f08482856126a7565b509392505050565b600082601f83011261270d5761270c6125f1565b5b813561271d8482602086016126b6565b91505092915050565b60006020828403121561273c5761273b6122c9565b5b600082013567ffffffffffffffff81111561275a576127596122ce565b5b612766848285016126f8565b91505092915050565b60008160000b9050919050565b6127858161276f565b82525050565b60006020820190506127a0600083018461277c565b92915050565b6000602082840312156127bc576127bb6122c9565b5b60006127ca8482850161251f565b91505092915050565b6127dc81612358565b81146127e757600080fd5b50565b6000813590506127f9816127d3565b92915050565b60008060408385031215612816576128156122c9565b5b60006128248582860161251f565b9250506020612835858286016127ea565b9150509250929050565b600067ffffffffffffffff82111561285a576128596125fb565b5b612863826123dd565b9050602081019050919050565b600061288361287e8461283f565b61265b565b90508281526020810184848401111561289f5761289e6125f6565b5b6128aa8482856126a7565b509392505050565b600082601f8301126128c7576128c66125f1565b5b81356128d7848260208601612870565b91505092915050565b600080600080608085870312156128fa576128f96122c9565b5b60006129088782880161251f565b94505060206129198782880161251f565b935050604061292a8782880161246a565b925050606085013567ffffffffffffffff81111561294b5761294a6122ce565b5b612957878288016128b2565b91505092959194509250565b61296c8161276f565b811461297757600080fd5b50565b60008135905061298981612963565b92915050565b6000806000606084860312156129a8576129a76122c9565b5b60006129b68682870161297a565b93505060206129c78682870161297a565b92505060406129d88682870161246a565b9150509250925092565b600080604083850312156129f9576129f86122c9565b5b6000612a078582860161297a565b9250506020612a188582860161297a565b9150509250929050565b60008060408385031215612a3957612a386122c9565b5b6000612a478582860161251f565b9250506020612a588582860161251f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612aa957607f821691505b60208210811415612abd57612abc612a62565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b6000612af9600e83612399565b9150612b0482612ac3565b602082019050919050565b60006020820190508181036000830152612b2881612aec565b9050919050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b6000612b65600a83612399565b9150612b7082612b2f565b602082019050919050565b60006020820190508181036000830152612b9481612b58565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b6000612bd1601183612399565b9150612bdc82612b9b565b602082019050919050565b60006020820190508181036000830152612c0081612bc4565b9050919050565b600081905092915050565b6000612c1d8261238e565b612c278185612c07565b9350612c378185602086016123aa565b80840191505092915050565b6000612c4f8284612c12565b915081905092915050565b600082825260208201905092915050565b50565b6000612c7b600083612c5a565b9150612c8682612c6b565b600082019050919050565b6000608082019050612ca660008301866124de565b612cb360208301856124de565b612cc06040830184612574565b8181036060830152612cd181612c6e565b9050949350505050565b600081519050612cea816122ff565b92915050565b600060208284031215612d0657612d056122c9565b5b6000612d1484828501612cdb565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b6000612d53601083612399565b9150612d5e82612d1d565b602082019050919050565b60006020820190508181036000830152612d8281612d46565b9050919050565b600081519050919050565b6000612d9f82612d89565b612da98185612c5a565b9350612db98185602086016123aa565b612dc2816123dd565b840191505092915050565b6000608082019050612de260008301876124de565b612def60208301866124de565b612dfc6040830185612574565b8181036060830152612e0e8184612d94565b905095945050505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612e5d82612e19565b9150612e6883612e19565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615612ea357612ea2612e23565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615612edb57612eda612e23565b5b828201905092915050565b6000612ef182612e19565b9150612efc83612e19565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615612f3b57612f3a612e23565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615612f7857612f77612e23565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615612fb557612fb4612e23565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615612ff257612ff1612e23565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061303782612e19565b915061304283612e19565b92508261305257613051612ffd565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561308b5761308a612e23565b5b828205905092915050565b60006130a18261276f565b91506130ac8361276f565b9250826130bc576130bb612ffd565b5b600160000383147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80831416156130f5576130f4612e23565b5b828205905092915050565b7f203c672069643d226d696e75746522207472616e73666f726d203d2022726f7460008201527f6174652800000000000000000000000000000000000000000000000000000000602082015250565b600061315c602483612c07565b915061316782613100565b602482019050919050565b7f202029223e2020202020203c7061746820636c6173733d226d696e7574652d6160008201527f726d2220643d224d3230302032303056373822202f3e2020202020203c63697260208201527f636c6520636c6173733d2273697a696e672d626f78222063783d22323030222060408201527f63793d223230302220723d2231333022202f3e202020203c2f673e202020203c60608201527f672069643d22686f757222207472616e73666f726d203d2022726f7461746528608082015250565b600061324060a083612c07565b915061324b82613172565b60a082019050919050565b7f202029223e2020202020203c7061746820636c6173733d22686f75722d61726d60008201527f2220643d224d323030203230305631343022202f3e2020202020203c6369726360208201527f6c6520636c6173733d2273697a696e672d626f78222063783d2232303022206360408201527f793d223230302220723d2231333022202f3e202020203c2f673e202000000000606082015250565b60006132fe607c83612c07565b915061330982613256565b607c82019050919050565b600061331f8261314f565b915061332b8285612c12565b915061333682613233565b91506133428284612c12565b915061334d826132f1565b91508190509392505050565b60008190508160005260206000209050919050565b6000815461337b81612a91565b6133858186612c07565b945060018216600081146133a057600181146133b1576133e4565b60ff198316865281860193506133e4565b6133ba85613359565b60005b838110156133dc578154818901526001820191506020810190506133bd565b838801955050505b50505092915050565b60006133f9828661336e565b91506134058285612c12565b9150613411828461336e565b9150819050949350505050565b7f7b226e616d65223a20224d6f6d656e74204e4654222c2022646573637269707460008201527f696f6e223a202246756c6c79206f6e2d636861696e20636c6f636b204e46542060208201527f746861742073686f777320796f75207468652063757272656e742074696d652e60408201527f222c2022696d616765223a2022646174613a696d6167652f7376672b786d6c3b60608201527f6261736536342c00000000000000000000000000000000000000000000000000608082015250565b60006134ec608783612c07565b91506134f78261341e565b608782019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b6000613538600283612c07565b915061354382613502565b600282019050919050565b6000613559826134df565b91506135658284612c12565b91506135708261352b565b915081905092915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b60006135b1601d83612c07565b91506135bc8261357b565b601d82019050919050565b60006135d2826135a4565b91506135de8284612c12565b915081905092915050565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b600061361f601483612399565b915061362a826135e9565b602082019050919050565b6000602082019050818103600083015261364e81613612565b9050919050565b7f416c726561647920436c61696d65640000000000000000000000000000000000600082015250565b600061368b600f83612399565b915061369682613655565b602082019050919050565b600060208201905081810360008301526136ba8161367e565b9050919050565b60006136cc82612449565b91506136d783612449565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561370c5761370b612e23565b5b828201905092915050565b600061372282612449565b915061372d83612449565b9250828210156137405761373f612e23565b5b828203905092915050565b600061375682612449565b915061376183612449565b92508261377157613770612ffd565b5b828204905092915050565b600061378782612449565b915061379283612449565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156137cb576137ca612e23565b5b828202905092915050565b60006137e182612449565b91506137ec83612449565b9250826137fc576137fb612ffd565b5b828206905092915050565b600061381282612449565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561384557613844612e23565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b60006138b5600e83612399565b91506138c08261387f565b602082019050919050565b600060208201905081810360008301526138e4816138a8565b905091905056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212207412184feaaca2ec36f7a1a51d20a404660d8c465c15d00a6b342853668362f464736f6c634300080a0033203c7376672077696474683d2234303022206865696768743d22343030222076696577426f783d223020302034303020343030222066696c6c3d226e6f6e652220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e202020203c6465663e2020202020203c7374796c653e2020202020202e6d696e7574652d61726d207b202020202020202066696c6c3a206e6f6e653b20202020202020207374726f6b653a20234133413341333b20202020202020207374726f6b652d77696474683a20363b20202020202020207374726f6b652d6d697465726c696d69743a20383b2020202020207d2020202020202e686f75722d61726d207b202020202020202066696c6c3a206e6f6e653b20202020202020207374726f6b653a20236666663b20202020202020207374726f6b652d77696474683a20363b20202020202020207374726f6b652d6d697465726c696d69743a20383b2020202020207d202020202020236d696e7574652c23686f7572207b20202020202020207472616e73666f726d2d6f726967696e3a2032303070782032303070783b2020202020207d202020203c2f7374796c653e202020203c2f6465663e202020203c726563742077696474683d2234303022206865696768743d22343030222066696c6c3d22776869746522202f3e202020203c636972636c652063783d22323030222063793d223230302220723d2231343722207374726f6b653d22626c61636b22207374726f6b652d77696474683d223622202f3e202020203c636972636c652063783d22323030222063793d223230302220723d22313435222066696c6c3d22626c61636b22207374726f6b653d222333393339333922207374726f6b652d77696474683d223222202f3e202020203c6d61736b2069643d226d61736b305f375f363122207374796c653d226d61736b2d747970653a616c70686122206d61736b556e6974733d227573657253706163654f6e5573652220783d2236312220793d223631222077696474683d2232373822206865696768743d22323738223e2020202020203c7265637420783d223139382220793d223631222077696474683d223422206865696768743d223338222066696c6c3d222343344334433422202f3e2020202020203c7265637420783d223139382220793d22333031222077696474683d223422206865696768743d223338222066696c6c3d222343344334433422202f3e2020202020203c7265637420783d2236312220793d22323032222077696474683d223422206865696768743d22333822207472616e73666f726d3d22726f74617465282d39302036312032303229222066696c6c3d222343344334433422202f3e2020202020203c7265637420783d223330312220793d22323032222077696474683d223422206865696768743d22333822207472616e73666f726d3d22726f74617465282d3930203330312032303229222066696c6c3d222343344334433422202f3e2020202020203c7265637420783d223133322e3233322220793d223332312e333738222077696474683d223422206865696768743d22333822207472616e73666f726d3d22726f74617465282d313530203133322e323332203332312e33373829222066696c6c3d222343344334433422202f3e2020202020203c7265637420783d223235322e3233322220793d223131332e353331222077696474683d223422206865696768743d22333822207472616e73666f726d3d22726f74617465282d313530203235322e323332203131332e35333129222066696c6c3d222343344334433422202f3e2020202020203c7265637420783d2238302e363232342220793d223237312e323332222077696474683d223422206865696768743d22333822207472616e73666f726d3d22726f74617465282d3132302038302e36323234203237312e32333229222066696c6c3d222343344334433422202f3e2020202020203c7265637420783d223238382e3436392220793d223135312e323332222077696474683d223422206865696768743d22333822207472616e73666f726d3d22726f74617465282d313230203238382e343639203135312e32333229222066696c6c3d222343344334433422202f3e2020202020203c7265637420783d2237382e363232342220793d223133322e323332222077696474683d223422206865696768743d22333822207472616e73666f726d3d22726f74617465282d36302037382e36323234203133322e32333229222066696c6c3d222343344334433422202f3e2020202020203c7265637420783d223238362e3436392220793d223235322e323332222077696474683d223422206865696768743d22333822207472616e73666f726d3d22726f74617465282d3630203238362e343639203235322e32333229222066696c6c3d222343344334433422202f3e2020202020203c7265637420783d223237312e3233322220793d223331392e333738222077696474683d223422206865696768743d22333822207472616e73666f726d3d22726f7461746528313530203237312e323332203331392e33373829222066696c6c3d222343344334433422202f3e2020202020203c7265637420783d223135312e3233322220793d223131312e353331222077696474683d223422206865696768743d22333822207472616e73666f726d3d22726f7461746528313530203135312e323332203131312e35333129222066696c6c3d222343344334433422202f3e202020203c2f6d61736b3e202020203c67206d61736b3d2275726c28236d61736b305f375f363129223e2020202020203c6d61736b2069643d226d61736b315f375f363122207374796c653d226d61736b2d747970653a616c70686122206d61736b556e6974733d227573657253706163654f6e5573652220783d2234352220793d223431222077696474683d2233323422206865696768743d22333136223e20202020202020203c7265637420783d2234352220793d223431222077696474683d2233323422206865696768743d22333136222066696c6c3d2275726c28237061696e74305f6c696e6561725f375f36312922202f3e2020202020203c2f6d61736b3e2020202020203c67206d61736b3d2275726c28236d61736b315f375f363129223e20202020202020203c7265637420783d2231332220793d2239222077696474683d2233383722206865696768743d22333539222066696c6c3d222346353834464622202f3e20202020202020203c672066696c7465723d2275726c282366696c746572305f665f375f363129223e202020202020202020203c636972636c652063783d2238322e35222063793d223131372e352220723d223131372e35222066696c6c3d222346463834434522202f3e20202020202020203c2f673e20202020202020203c672066696c7465723d2275726c282366696c746572315f665f375f363129223e202020202020202020203c636972636c652063783d223334392e35222063793d223233392e352220723d223131372e35222066696c6c3d222338344137464622202f3e20202020202020203c2f673e20202020202020203c672066696c7465723d2275726c282366696c746572325f665f375f363129223e202020202020202020203c636972636c652063783d223131332e35222063793d223334352e352220723d223131372e35222066696c6c3d222345303931393122202f3e20202020202020203c2f673e2020202020203c2f673e202020203c2f673e203c636972636c652063783d22323030222063793d223230302220723d2235222066696c6c3d22776869746522202f3e202020203c646566733e2020202020203c66696c7465722069643d2266696c746572305f665f375f36312220783d222d3133352220793d222d313030222077696474683d2234333522206865696768743d22343335222066696c746572556e6974733d227573657253706163654f6e557365222020202020202020636f6c6f722d696e746572706f6c6174696f6e2d66696c746572733d2273524742223e20202020202020203c6665466c6f6f6420666c6f6f642d6f7061636974793d22302220726573756c743d224261636b67726f756e64496d61676546697822202f3e20202020202020203c6665426c656e64206d6f64653d226e6f726d616c2220696e3d22536f75726365477261706869632220696e323d224261636b67726f756e64496d6167654669782220726573756c743d22736861706522202f3e20202020202020203c6665476175737369616e426c757220737464446576696174696f6e3d2235302220726573756c743d22656666656374315f666f726567726f756e64426c75725f375f363122202f3e2020202020203c2f66696c7465723e2020202020203c66696c7465722069643d2266696c746572315f665f375f36312220783d223133322220793d223232222077696474683d2234333522206865696768743d22343335222066696c746572556e6974733d227573657253706163654f6e557365222020202020202020636f6c6f722d696e746572706f6c6174696f6e2d66696c746572733d2273524742223e20202020202020203c6665466c6f6f6420666c6f6f642d6f7061636974793d22302220726573756c743d224261636b67726f756e64496d61676546697822202f3e20202020202020203c6665426c656e64206d6f64653d226e6f726d616c2220696e3d22536f75726365477261706869632220696e323d224261636b67726f756e64496d6167654669782220726573756c743d22736861706522202f3e20202020202020203c6665476175737369616e426c757220737464446576696174696f6e3d2235302220726573756c743d22656666656374315f666f726567726f756e64426c75725f375f363122202f3e2020202020203c2f66696c7465723e2020202020203c66696c7465722069643d2266696c746572325f665f375f36312220783d222d3130342220793d22313238222077696474683d2234333522206865696768743d22343335222066696c746572556e6974733d227573657253706163654f6e557365222020202020202020636f6c6f722d696e746572706f6c6174696f6e2d66696c746572733d2273524742223e20202020202020203c6665466c6f6f6420666c6f6f642d6f7061636974793d22302220726573756c743d224261636b67726f756e64496d61676546697822202f3e20202020202020203c6665426c656e64206d6f64653d226e6f726d616c2220696e3d22536f75726365477261706869632220696e323d224261636b67726f756e64496d6167654669782220726573756c743d22736861706522202f3e20202020202020203c6665476175737369616e426c757220737464446576696174696f6e3d2235302220726573756c743d22656666656374315f666f726567726f756e64426c75725f375f363122202f3e2020202020203c2f66696c7465723e2020202020203c6c696e6561724772616469656e742069643d227061696e74305f6c696e6561725f375f3631222078313d22323037222079313d223431222078323d22323037222079323d2233353722206772616469656e74556e6974733d227573657253706163654f6e557365223e20202020202020203c73746f702073746f702d636f6c6f723d222346463834434522202f3e20202020202020203c73746f70206f66667365743d2231222073746f702d636f6c6f723d222339323344464622202f3e2020202020203c2f6c696e6561724772616469656e743e202020203c2f646566733e20203c2f7376673e",
      "deployedBytecode": "0x6080604052600436106101c25760003560e01c806367913340116100f7578063c87b56dd11610095578063d082e38111610064578063d082e381146106c4578063d1369b0f146106ef578063db819ade1461071a578063e985e9c514610736576101c2565b8063c87b56dd146105e4578063c884ef8314610621578063cdc1d7921461065e578063ce9ecbd11461069b576101c2565b806395d89b41116100d157806395d89b411461053c578063a22cb46514610567578063ab98e42514610590578063b88d4fde146105bb576101c2565b8063679133401461048557806370a08231146104c25780637c6d56a6146104ff576101c2565b806330d871c6116101645780633ccfd60b1161013e5780633ccfd60b146103cb5780633fb2b692146103e257806342842e0e1461041f5780636352211e14610448576101c2565b806330d871c6146103145780633af9e89c146103515780633afbf2511461038e576101c2565b8063095ea7b3116101a0578063095ea7b31461026c5780631581b6001461029557806315d655c9146102c057806323b872dd146102eb576101c2565b806301ffc9a7146101c757806306fdde0314610204578063081812fc1461022f575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e9919061232b565b610773565b6040516101fb9190612373565b60405180910390f35b34801561021057600080fd5b50610219610805565b6040516102269190612427565b60405180910390f35b34801561023b57600080fd5b506102566004803603810190610251919061247f565b610893565b60405161026391906124ed565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e9190612534565b6108c6565b005b3480156102a157600080fd5b506102aa610aaf565b6040516102b791906124ed565b60405180910390f35b3480156102cc57600080fd5b506102d5610ad3565b6040516102e29190612583565b60405180910390f35b3480156102f757600080fd5b50610312600480360381019061030d919061259e565b610af7565b005b34801561032057600080fd5b5061033b60048036038101906103369190612726565b610ef7565b6040516103489190612427565b60405180910390f35b34801561035d57600080fd5b506103786004803603810190610373919061247f565b610f53565b604051610385919061278b565b60405180910390f35b34801561039a57600080fd5b506103b560048036038101906103b0919061247f565b610f73565b6040516103c2919061278b565b60405180910390f35b3480156103d757600080fd5b506103e0610f93565b005b3480156103ee57600080fd5b50610409600480360381019061040491906127a6565b610ffc565b6040516104169190612583565b60405180910390f35b34801561042b57600080fd5b506104466004803603810190610441919061259e565b611014565b005b34801561045457600080fd5b5061046f600480360381019061046a919061247f565b61114c565b60405161047c91906124ed565b60405180910390f35b34801561049157600080fd5b506104ac60048036038101906104a7919061247f565b61117f565b6040516104b991906124ed565b60405180910390f35b3480156104ce57600080fd5b506104e960048036038101906104e491906127a6565b6111bc565b6040516104f69190612583565b60405180910390f35b34801561050b57600080fd5b50610526600480360381019061052191906127a6565b6111d4565b6040516105339190612583565b60405180910390f35b34801561054857600080fd5b5061055161121d565b60405161055e9190612427565b60405180910390f35b34801561057357600080fd5b5061058e600480360381019061058991906127ff565b6112ab565b005b34801561059c57600080fd5b506105a56113a8565b6040516105b29190612427565b60405180910390f35b3480156105c757600080fd5b506105e260048036038101906105dd91906128e0565b611436565b005b3480156105f057600080fd5b5061060b6004803603810190610606919061247f565b611571565b6040516106189190612427565b60405180910390f35b34801561062d57600080fd5b50610648600480360381019061064391906127a6565b6117b5565b6040516106559190612373565b60405180910390f35b34801561066a57600080fd5b506106856004803603810190610680919061247f565b6117d5565b60405161069291906124ed565b60405180910390f35b3480156106a757600080fd5b506106c260048036038101906106bd919061298f565b611808565b005b3480156106d057600080fd5b506106d961186b565b6040516106e69190612583565b60405180910390f35b3480156106fb57600080fd5b50610704611871565b6040516107119190612427565b60405180910390f35b610734600480360381019061072f91906129e2565b6118ff565b005b34801561074257600080fd5b5061075d60048036038101906107589190612a22565b611bca565b60405161076a9190612373565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107ce57506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107fe5750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6000805461081290612a91565b80601f016020809104026020016040519081016040528092919081815260200182805461083e90612a91565b801561088b5780601f106108605761010080835404028352916020019161088b565b820191906000526020600020905b81548152906001019060200180831161086e57829003601f168201915b505050505081565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109be5750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6109fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f490612b0f565b60405180910390fd5b826004600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6003600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610b98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8f90612b7b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bff90612be7565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610cc85750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b80610d3157506004600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610d70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6790612b0f565b60405180910390fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60606000610f2383604051602001610f0f9190612c43565b604051602081830303815290604052611bf9565b9050600081604051602001610f389190612c43565b60405160208183030381529060405290508092505050919050565b600c6020528060005260406000206000915054906101000a900460000b81565b600d6020528060005260406000206000915054906101000a900460000b81565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610ff9573d6000803e3d6000fd5b50565b600a6020528060005260406000206000915090505481565b61101f838383610af7565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480611108575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b81526004016110a493929190612c91565b6020604051808303816000875af11580156110c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e79190612cf0565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113e90612d69565b60405180910390fd5b505050565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60026020528060005260406000206000915090505481565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6001805461122a90612a91565b80601f016020809104026020016040519081016040528092919081815260200182805461125690612a91565b80156112a35780601f10611278576101008083540402835291602001916112a3565b820191906000526020600020905b81548152906001019060200180831161128657829003601f168201915b505050505081565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161139c9190612373565b60405180910390a35050565b600780546113b590612a91565b80601f01602080910402602001604051908101604052809291908181526020018280546113e190612a91565b801561142e5780601f106114035761010080835404028352916020019161142e565b820191906000526020600020905b81548152906001019060200180831161141157829003601f168201915b505050505081565b611441848484610af7565b60008373ffffffffffffffffffffffffffffffffffffffff163b148061152c575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168373ffffffffffffffffffffffffffffffffffffffff1663150b7a02338786866040518563ffffffff1660e01b81526004016114c89493929190612dcd565b6020604051808303816000875af11580156114e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150b9190612cf0565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b61156b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156290612d69565b60405180910390fd5b50505050565b6060600061157e42611d98565b9050600061158b42611dcc565b9050600061159842611dfb565b90506000600c6006600d600089815260200190815260200160002060009054906101000a900460000b60000b856115cf9190612e52565b6115d99190612ee6565b6115e3919061302c565b600c610168603c600d60008b815260200190815260200160002060009054906101000a900460000b6116159190613096565b60000b600c60008b815260200190815260200160002060009054906101000a900460000b60000b886116479190612e52565b6116519190612e52565b61165b9190612ee6565b611665919061302c565b61166f9190612e52565b90506000603c6006846116829190612ee6565b61168c919061302c565b603c610168600d60008b815260200190815260200160002060009054906101000a900460000b60000b876116c09190612e52565b6116ca9190612ee6565b6116d4919061302c565b6116de9190612e52565b905060006116eb83611e14565b905060006116f883611e14565b90506000818360405160200161170f929190613314565b604051602081830303815290604052905060006007826008604051602001611739939291906133ed565b6040516020818303038152906040529050600061175582610ef7565b905060006117818260405160200161176d919061354e565b604051602081830303815290604052611bf9565b90508060405160200161179491906135c7565b6040516020818303038152906040529b505050505050505050505050919050565b60096020528060005260406000206000915054906101000a900460ff1681565b600b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b82600c600083815260200190815260200160002060006101000a81548160ff021916908360000b60ff16021790555081600d600083815260200190815260200160002060006101000a81548160ff021916908360000b60ff160217905550505050565b60065481565b6008805461187e90612a91565b80601f01602080910402602001604051908101604052809291908181526020018280546118aa90612a91565b80156118f75780601f106118cc576101008083540402835291602001916118f7565b820191906000526020600020905b8154815290600101906020018083116118da57829003601f168201915b505050505081565b7f0000000000000000000000000000000000000000000000000000000000000000341015611962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195990613635565b60405180910390fd5b60001515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146119f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ec906136a1565b60405180910390fd5b611a0133600654611f75565b611a0e8282600654611808565b6001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600654600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600b6000600654815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506006547f8473e948bcf25e455d9d6476037e3b847d78f2411a8481e70d546afce6a7579160405160405180910390a26001600654611b3e91906136c1565b60068190555060007f000000000000000000000000000000000000000000000000000000000000000034611b729190613717565b90506000811115611bc5573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611bc3573d6000803e3d6000fd5b505b505050565b60056020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b606060006040518060600160405280604081526020016138ec6040913990506000835190506000811415611c40576040518060200160405280600081525092505050611d93565b60006003600283611c5191906136c1565b611c5b919061374b565b6004611c67919061377c565b90506000602082611c7891906136c1565b67ffffffffffffffff811115611c9157611c906125fb565b5b6040519080825280601f01601f191660200182016040528015611cc35781602001600182028036833780820191505090505b5090506000849050600181016020830160005b86811015611d4f5760038101905062ffffff818b015116603f8160121c168401518060081b905060ff603f83600c1c1686015116810190508060081b905060ff603f8360061c1686015116810190508060081b905060ff603f831686015116810190508060e01b90508084526004840193505050611cd6565b506003860660018114611d695760028114611d7957611d84565b613d3d60f01b6002830352611d84565b603d60f81b60018303525b50848452505081955050505050505b919050565b6000806201518063ffffffff1683611db091906137d6565b9050610e1061ffff1681611dc4919061374b565b915050919050565b600080610e1061ffff1683611de191906137d6565b9050603c60ff1681611df3919061374b565b915050919050565b6000603c60ff1682611e0d91906137d6565b9050919050565b60606000821415611e5c576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611f70565b600082905060005b60008214611e8e578080611e7790613807565b915050600a82611e87919061374b565b9150611e64565b60008167ffffffffffffffff811115611eaa57611ea96125fb565b5b6040519080825280601f01601f191660200182016040528015611edc5781602001600182028036833780820191505090505b5090505b60008514611f6957600182611ef59190613717565b9150600a85611f0491906137d6565b6030611f1091906136c1565b60f81b818381518110611f2657611f25613850565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611f62919061374b565b9450611ee0565b8093505050505b919050565b611f7f82826120ac565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480612069575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a02336000856040518463ffffffff1660e01b815260040161200593929190612c91565b6020604051808303816000875af1158015612024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120489190612cf0565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b6120a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209f90612d69565b60405180910390fd5b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561211c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211390612be7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146121be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b5906138cb565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612308816122d3565b811461231357600080fd5b50565b600081359050612325816122ff565b92915050565b600060208284031215612341576123406122c9565b5b600061234f84828501612316565b91505092915050565b60008115159050919050565b61236d81612358565b82525050565b60006020820190506123886000830184612364565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123c85780820151818401526020810190506123ad565b838111156123d7576000848401525b50505050565b6000601f19601f8301169050919050565b60006123f98261238e565b6124038185612399565b93506124138185602086016123aa565b61241c816123dd565b840191505092915050565b6000602082019050818103600083015261244181846123ee565b905092915050565b6000819050919050565b61245c81612449565b811461246757600080fd5b50565b60008135905061247981612453565b92915050565b600060208284031215612495576124946122c9565b5b60006124a38482850161246a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124d7826124ac565b9050919050565b6124e7816124cc565b82525050565b600060208201905061250260008301846124de565b92915050565b612511816124cc565b811461251c57600080fd5b50565b60008135905061252e81612508565b92915050565b6000806040838503121561254b5761254a6122c9565b5b60006125598582860161251f565b925050602061256a8582860161246a565b9150509250929050565b61257d81612449565b82525050565b60006020820190506125986000830184612574565b92915050565b6000806000606084860312156125b7576125b66122c9565b5b60006125c58682870161251f565b93505060206125d68682870161251f565b92505060406125e78682870161246a565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612633826123dd565b810181811067ffffffffffffffff82111715612652576126516125fb565b5b80604052505050565b60006126656122bf565b9050612671828261262a565b919050565b600067ffffffffffffffff821115612691576126906125fb565b5b61269a826123dd565b9050602081019050919050565b82818337600083830152505050565b60006126c96126c484612676565b61265b565b9050828152602081018484840111156126e5576126e46125f6565b5b6126f08482856126a7565b509392505050565b600082601f83011261270d5761270c6125f1565b5b813561271d8482602086016126b6565b91505092915050565b60006020828403121561273c5761273b6122c9565b5b600082013567ffffffffffffffff81111561275a576127596122ce565b5b612766848285016126f8565b91505092915050565b60008160000b9050919050565b6127858161276f565b82525050565b60006020820190506127a0600083018461277c565b92915050565b6000602082840312156127bc576127bb6122c9565b5b60006127ca8482850161251f565b91505092915050565b6127dc81612358565b81146127e757600080fd5b50565b6000813590506127f9816127d3565b92915050565b60008060408385031215612816576128156122c9565b5b60006128248582860161251f565b9250506020612835858286016127ea565b9150509250929050565b600067ffffffffffffffff82111561285a576128596125fb565b5b612863826123dd565b9050602081019050919050565b600061288361287e8461283f565b61265b565b90508281526020810184848401111561289f5761289e6125f6565b5b6128aa8482856126a7565b509392505050565b600082601f8301126128c7576128c66125f1565b5b81356128d7848260208601612870565b91505092915050565b600080600080608085870312156128fa576128f96122c9565b5b60006129088782880161251f565b94505060206129198782880161251f565b935050604061292a8782880161246a565b925050606085013567ffffffffffffffff81111561294b5761294a6122ce565b5b612957878288016128b2565b91505092959194509250565b61296c8161276f565b811461297757600080fd5b50565b60008135905061298981612963565b92915050565b6000806000606084860312156129a8576129a76122c9565b5b60006129b68682870161297a565b93505060206129c78682870161297a565b92505060406129d88682870161246a565b9150509250925092565b600080604083850312156129f9576129f86122c9565b5b6000612a078582860161297a565b9250506020612a188582860161297a565b9150509250929050565b60008060408385031215612a3957612a386122c9565b5b6000612a478582860161251f565b9250506020612a588582860161251f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612aa957607f821691505b60208210811415612abd57612abc612a62565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b6000612af9600e83612399565b9150612b0482612ac3565b602082019050919050565b60006020820190508181036000830152612b2881612aec565b9050919050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b6000612b65600a83612399565b9150612b7082612b2f565b602082019050919050565b60006020820190508181036000830152612b9481612b58565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b6000612bd1601183612399565b9150612bdc82612b9b565b602082019050919050565b60006020820190508181036000830152612c0081612bc4565b9050919050565b600081905092915050565b6000612c1d8261238e565b612c278185612c07565b9350612c378185602086016123aa565b80840191505092915050565b6000612c4f8284612c12565b915081905092915050565b600082825260208201905092915050565b50565b6000612c7b600083612c5a565b9150612c8682612c6b565b600082019050919050565b6000608082019050612ca660008301866124de565b612cb360208301856124de565b612cc06040830184612574565b8181036060830152612cd181612c6e565b9050949350505050565b600081519050612cea816122ff565b92915050565b600060208284031215612d0657612d056122c9565b5b6000612d1484828501612cdb565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b6000612d53601083612399565b9150612d5e82612d1d565b602082019050919050565b60006020820190508181036000830152612d8281612d46565b9050919050565b600081519050919050565b6000612d9f82612d89565b612da98185612c5a565b9350612db98185602086016123aa565b612dc2816123dd565b840191505092915050565b6000608082019050612de260008301876124de565b612def60208301866124de565b612dfc6040830185612574565b8181036060830152612e0e8184612d94565b905095945050505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612e5d82612e19565b9150612e6883612e19565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615612ea357612ea2612e23565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615612edb57612eda612e23565b5b828201905092915050565b6000612ef182612e19565b9150612efc83612e19565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615612f3b57612f3a612e23565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615612f7857612f77612e23565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615612fb557612fb4612e23565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615612ff257612ff1612e23565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061303782612e19565b915061304283612e19565b92508261305257613051612ffd565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561308b5761308a612e23565b5b828205905092915050565b60006130a18261276f565b91506130ac8361276f565b9250826130bc576130bb612ffd565b5b600160000383147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80831416156130f5576130f4612e23565b5b828205905092915050565b7f203c672069643d226d696e75746522207472616e73666f726d203d2022726f7460008201527f6174652800000000000000000000000000000000000000000000000000000000602082015250565b600061315c602483612c07565b915061316782613100565b602482019050919050565b7f202029223e2020202020203c7061746820636c6173733d226d696e7574652d6160008201527f726d2220643d224d3230302032303056373822202f3e2020202020203c63697260208201527f636c6520636c6173733d2273697a696e672d626f78222063783d22323030222060408201527f63793d223230302220723d2231333022202f3e202020203c2f673e202020203c60608201527f672069643d22686f757222207472616e73666f726d203d2022726f7461746528608082015250565b600061324060a083612c07565b915061324b82613172565b60a082019050919050565b7f202029223e2020202020203c7061746820636c6173733d22686f75722d61726d60008201527f2220643d224d323030203230305631343022202f3e2020202020203c6369726360208201527f6c6520636c6173733d2273697a696e672d626f78222063783d2232303022206360408201527f793d223230302220723d2231333022202f3e202020203c2f673e202000000000606082015250565b60006132fe607c83612c07565b915061330982613256565b607c82019050919050565b600061331f8261314f565b915061332b8285612c12565b915061333682613233565b91506133428284612c12565b915061334d826132f1565b91508190509392505050565b60008190508160005260206000209050919050565b6000815461337b81612a91565b6133858186612c07565b945060018216600081146133a057600181146133b1576133e4565b60ff198316865281860193506133e4565b6133ba85613359565b60005b838110156133dc578154818901526001820191506020810190506133bd565b838801955050505b50505092915050565b60006133f9828661336e565b91506134058285612c12565b9150613411828461336e565b9150819050949350505050565b7f7b226e616d65223a20224d6f6d656e74204e4654222c2022646573637269707460008201527f696f6e223a202246756c6c79206f6e2d636861696e20636c6f636b204e46542060208201527f746861742073686f777320796f75207468652063757272656e742074696d652e60408201527f222c2022696d616765223a2022646174613a696d6167652f7376672b786d6c3b60608201527f6261736536342c00000000000000000000000000000000000000000000000000608082015250565b60006134ec608783612c07565b91506134f78261341e565b608782019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b6000613538600283612c07565b915061354382613502565b600282019050919050565b6000613559826134df565b91506135658284612c12565b91506135708261352b565b915081905092915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b60006135b1601d83612c07565b91506135bc8261357b565b601d82019050919050565b60006135d2826135a4565b91506135de8284612c12565b915081905092915050565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b600061361f601483612399565b915061362a826135e9565b602082019050919050565b6000602082019050818103600083015261364e81613612565b9050919050565b7f416c726561647920436c61696d65640000000000000000000000000000000000600082015250565b600061368b600f83612399565b915061369682613655565b602082019050919050565b600060208201905081810360008301526136ba8161367e565b9050919050565b60006136cc82612449565b91506136d783612449565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561370c5761370b612e23565b5b828201905092915050565b600061372282612449565b915061372d83612449565b9250828210156137405761373f612e23565b5b828203905092915050565b600061375682612449565b915061376183612449565b92508261377157613770612ffd565b5b828204905092915050565b600061378782612449565b915061379283612449565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156137cb576137ca612e23565b5b828202905092915050565b60006137e182612449565b91506137ec83612449565b9250826137fc576137fb612ffd565b5b828206905092915050565b600061381282612449565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561384557613844612e23565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b60006138b5600e83612399565b91506138c08261387f565b602082019050919050565b600060208201905081810360008301526138e4816138a8565b905091905056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212207412184feaaca2ec36f7a1a51d20a404660d8c465c15d00a6b342853668362f464736f6c634300080a0033",
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "storageLayout": {
        "storage": [
          {
            "astId": 231,
            "contract": "contracts/momentNFT.sol:momentNFT",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 233,
            "contract": "contracts/momentNFT.sol:momentNFT",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 244,
            "contract": "contracts/momentNFT.sol:momentNFT",
            "label": "balanceOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 248,
            "contract": "contracts/momentNFT.sol:momentNFT",
            "label": "ownerOf",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 252,
            "contract": "contracts/momentNFT.sol:momentNFT",
            "label": "getApproved",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 258,
            "contract": "contracts/momentNFT.sol:momentNFT",
            "label": "isApprovedForAll",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 846,
            "contract": "contracts/momentNFT.sol:momentNFT",
            "label": "tokenCounter",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 863,
            "contract": "contracts/momentNFT.sol:momentNFT",
            "label": "svgTop",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 865,
            "contract": "contracts/momentNFT.sol:momentNFT",
            "label": "svgBot",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 869,
            "contract": "contracts/momentNFT.sol:momentNFT",
            "label": "claimed",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 873,
            "contract": "contracts/momentNFT.sol:momentNFT",
            "label": "userNFTTokenId",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 877,
            "contract": "contracts/momentNFT.sol:momentNFT",
            "label": "ownerOfNFTId",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 881,
            "contract": "contracts/momentNFT.sol:momentNFT",
            "label": "timeZoneHour",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_int8)"
          },
          {
            "astId": 885,
            "contract": "contracts/momentNFT.sol:momentNFT",
            "label": "timeZoneMin",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_int8)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_int8": {
            "encoding": "inplace",
            "label": "int8",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_bool)"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_uint256,t_address)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_mapping(t_uint256,t_int8)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => int8)",
            "numberOfBytes": "32",
            "value": "t_int8"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      }
    }
  }
}